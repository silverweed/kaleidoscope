extern putchard(x);
extern printd(x);

def printdensity(d)
	if 8 < d then
		putchard(32)
	else if 4 < d then
		putchard(46)
	else if 2 < d then
		putchard(43)
	else
		putchard(42)
;

def unary ! (v)
	if v then
		0
	else
		1
;

def binary | 5 (x y)
	if x then
		1
	else if y then
		1
	else 
		0
;

def binary & 6 (x y)
	if !x then
		0
	else
		!!y
;

def binary : 1 (x y)
	y
;

# Determine whether the specific location diverges.
# Solve for z = z^2 + c in the complex plane
def mandelconverger(real imag iters creal cimag)
	if 255 < iters | 4 < (real*real + imag*imag) then
		iters
	else
		mandelconverger(real*real - imag*imag + creal,
				2*real*imag  + cimag,
				iters + 1, creal, cimag)
;

# Return the number of iterations required for the iteration to escape
def mandelconverge(real imag)
	mandelconverger(real, imag, 0, real, imag)
;

# Compute and plot the mandelbrot set with the specified 2-d range info
def mandelhelp(xmin xmax xstep ymin ymax ystep)
	for y = ymin, y < ymax, ystep in (
		(for x = xmin, x < xmax, xstep in
			printdensity(mandelconverge(x, y)))
		: putchard(10)
	)
;

def mandel(realstart imagstart realmag imagmag)
	mandelhelp(realstart, realstart+realmag*78, realmag,
		imagstart, imagstart+imagmag*40, imagmag)
;

mandel(0-2.3, 0-1.3, 0.05, 0.07);
